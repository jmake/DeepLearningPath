import { BleManager } from 'react-native-ble-plx';

import React, { useEffect, useState } from 'react';

import { PermissionsAndroid, Platform, FlatList, StyleSheet } from 'react-native';
import { View, Button, Text, Pressable } from 'react-native';
import { TouchableOpacity } from 'react-native';

import { createContext, useContext, useRef } from 'react';

//---------------------------------------------------------------------------// 
//---------------------------------------------------------------------------// 
export const SpicyContext = createContext();

export const SpicyProvider = ({ children }) => 
{
  const [time, setTime] = useState(null);
  const bleDataRef = useRef([]);

  return (
    <SpicyContext.Provider value={{ bleDataRef, time, setTime}}>
      {children}
    </SpicyContext.Provider>
  );
};
  
export const useSpicyData = () => useContext(SpicyContext);



//---------------------------------------------------------------------------// 
//---------------------------------------------------------------------------// 
//import { WebView } from 'react-native-webview';

const BleComponent = () => 
{
  const bleManager = useRef(new BleManager()).current;
  const [dataPoints, setDataPoints] = useState([]);
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => 
  {
    const connectDevice = async () => 
    {
      const device = await bleManager.connectToDevice('DEVICE_ID');
      await device.discoverAllServicesAndCharacteristics();
      setIsConnected(true);

      device.monitorCharacteristicForService('SERVICE_UUID', 'CHARACTERISTIC_UUID', (error, characteristic) => {
        if (error) return;
        const data = parseData(characteristic.value);
        if (data) {
          setDataPoints((prev) => {
            const newData = [...prev, { time: data.time, x: data.x }];
            return newData.length > 100 ? newData.slice(1) : newData;
          });
        }
      });
    };

    connectDevice();

    return () => {
      bleManager.stopDeviceScan();
      bleManager.destroy();
    };
  }, []);

  const parseData = (value) => {
    const decoded = Buffer.from(value, 'base64').toString('utf-8');
    try {
      return JSON.parse(decoded);
    } catch {
      return null;
    }
  };

  // Prepare data for the chart (use this as props for the WebView)
  const chartData = {
    labels: dataPoints.map((point) => point.time.toString()),
    datasets: [{ data: dataPoints.map((point) => point.x) }],
  };

  const chartHTML = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Chart</title>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </head>
    <body>
      <canvas id="myChart" width="400" height="200"></canvas>
      <script>
        const data = ${JSON.stringify(chartData)};
        const ctx = document.getElementById('myChart').getContext('2d');
        new Chart(ctx, {
          type: 'line',
          data: {
            labels: data.labels,
            datasets: [{
              label: 'X vs Time',
              data: data.datasets[0].data,
              borderColor: 'rgba(0, 204, 255, 1)',
              fill: false,
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              x: { title: { display: true, text: 'Time' } },
              y: { title: { display: true, text: 'X Value' } }
            }
          }
        });
      </script>
    </body>
    </html>
  `;

  return (
    <View style={{ flex: 1, padding: 20 }}>
      <Text>{isConnected ? 'Connected' : 'Connecting...'}</Text>
      <WebView originWhitelist={['*']} source={{ html: chartHTML }} />
    </View>
  );
};




//---------------------------------------------------------------------------// 
//---------------------------------------------------------------------------// 
let currentDevice = null;

const manager = new BleManager();


//---------------------------------------------------------------------------// 
const requestPermissions = async () => 
{
  if (Platform.OS === 'android') {
    await PermissionsAndroid.requestMultiple([
      PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
      PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
    ]);
  }
};

const IMU_UUID = "19b10020-e8f2-537e-4f6c-d104768a1214"; 


//---------------------------------------------------------------------------// 
function imu_update(base64Value) 
{
  const buffer = new Uint8Array(atob(base64Value).split("").map(char => char.charCodeAt(0)));

  const floatArray = new Float32Array(buffer.buffer);
  console.log( Array.from(floatArray) ); 

  //let data = useSpicyData(); 
  //console.log( data );
}


async function characteristic_general(chars) 
{
  if(!currentDevice) return; 
  
  console.log(`[characteristic_general] '${chars.uuid}'`);
  if (chars.uuid !== IMU_UUID) return;

  chars.monitor((error, char) => 
  {
    if (error) 
    {
      console.warn(`[characteristic_general] error : '${error}'`);
      return;
    }

    if (char?.value) 
    {
      console.log(`[characteristic_general] '${chars.uuid}' '${char.value}' `);
      imu_update(char.value); 
    }
    else
    {
      console.log(`[characteristic_general] '${chars.uuid}' 'NO FOUND!' `);
    }
  });
}


//---------------------------------------------------------------------------// 
async function connectToDevice(device) 
{
  try 
  {
    console.log('[connectToDevice] Disconnecting from all connected devices...');

    if(currentDevice) 
    {
      console.log(`ðŸ”Œ Disconnecting: '${currentDevice.name}' `);
      await manager.cancelDeviceConnection(currentDevice.id);
      currentDevice = null;      
    }

    console.log(`ðŸ”Œ Connecting to device: ${device.name}`);

    const connectedDevice = await manager.connectToDevice(device.id);
    console.log(`+ '${connectedDevice.name}' connected!`);

    currentDevice = connectedDevice; 

    await connectedDevice.discoverAllServicesAndCharacteristics();
    const services = await connectedDevice.services();

    for (const service of services) 
    {
      console.log(`  [${connectedDevice.name}] Service: ${service.uuid}`);

      const characteristics = await service.characteristics();
      for (const characteristic of characteristics) 
      {
        console.log(`    [${connectedDevice.name}] Characteristic: ${characteristic.uuid}`);
        characteristic_general(characteristic); 
      }
    }

    return connectedDevice;
  } 
  catch (error) 
  { 
    console.log(`[connectToDevice] Connection error: ${error}`);
  }
}


//---------------------------------------------------------------------------// 
export function UIMain(props) 
{
  const styles = StyleSheet.create({
    container: { flex: 1, padding: 20, paddingTop: 50 },
    device: { marginVertical: 8, fontSize: 16, color: 'blue' },
  });

  const spicyData = useSpicyData();
    
  const [connected, setConnected] = useState(false);
  const [connecting, setConnecting] = useState(false);
  const [connectedDevice, setConnectedDevice] = useState(null);

  const handleDevicePress = async (device) => {
    setConnecting(true);
    setConnectedDevice(device); // Set early for title during connecting

    const result = await connectToDevice(device);
    console.log(`[UIMain] '${result.name}' connected!`);

    if (result) {
      setConnected(true);
      setConnectedDevice(result);
    }

    setConnecting(false);
  };

  useEffect(() => {
    setConnected(false);
    setConnectedDevice(null);
    setConnecting(false);
  }, [props.devices]);

  const getScanButtonTitle = () => 
  {
    if (props.isScanning) return "Scanning...";
    if (connecting && connectedDevice) return `${connectedDevice.name} connecting...`;
    if (connected && connectedDevice) return `${connectedDevice.name} (Disconnect)`;
    return "Scan for BLE Devices";
  };

  return (
    <View style={styles.container}>
      <CurrentTime disabled={props.isScanning} /> 

      <RoundedButton 
        title={getScanButtonTitle()} 
        onPress={props.startScan} 
        disabled={props.isScanning || connecting} 
      />

      <View style={{ flex: 1, padding: 20 }}>
        <Text style={{ color: 'red' }}> { spicyData?.time ?? 'No time yet' } </Text>
      </View>

      <FlatList
        data={props.devices}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <RoundedButton 
            color="green"
            title={`${item.name} (${item.id})`} 
            onPress={() => handleDevicePress(item)} 
            disabled={connected || connecting || props.isScanning} 
          />
        )}
      />

      <View style={{ flex: 1, padding: 0 }}>
        <Text style={{ color: 'yellow' }}> { spicyData?.time ?? 'No time yet' } </Text>
      </View>

    </View>
  );
}

//---------------------------------------------------------------------------// 
const MainContent = () => 
{
  const spicyData = useSpicyData();

  const [devices, setDevices] = useState([]);
  const [isScanning, setIsScanning] = useState(false); 

  useEffect(() => 
  {
    requestPermissions();
    //return () => manager.destroy();
    return () => manager.stopDeviceScan();
  }, []);

  const startScan = async () => 
  {
    setDevices([]);
    setIsScanning(true); 

    if( currentDevice ) 
    {
      console.log(`[BLE] Disconnecting: '${currentDevice.name}' `);
      await manager.cancelDeviceConnection(currentDevice.id);
      currentDevice = null;      
      setIsScanning(true);
    }
    else
    {
      console.log(`[BLE] 'currentDevice' no found!`);
    }
    
    manager.startDeviceScan(null, null, (error, device) => 
    {
      if (error) 
      {
        setIsScanning(false);
        console.warn(error);
        return;
      }

      if (device?.name) 
      {
        console.log(`[BLE] Found device: '${device.name}'`);

        setDevices((prev) => {
          if (prev.find((d) => d.id === device.id)) return prev;
          return [...prev, device];
        });
      }
    });

    setTimeout( async () => 
    {
      setIsScanning(false); 
      manager.stopDeviceScan(); 
      console.log(`[BLE] Scanning end!`); 
      return stop;  
    }, 5000);

  };

  return (
    <UIMain 
      devices={devices} 
      startScan={startScan} 
      isScanning={isScanning} 
    />
  ); 
};


export function Main() 
{
  console.log("[BLE] Running...");

  return (
    <SpicyProvider>
      <MainContent />
    </SpicyProvider>
  );
}


function App()
{
  return <Main />
} 

export default App;

//---------------------------------------------------------------------------// 
//---------------------------------------------------------------------------// 
export function RoundedButton ( {color='#007bff', ...props} )
{
  const styles = StyleSheet.create({
    button: {
      alignItems: 'center',
      borderRadius: 15, 
      marginVertical: 3,
      paddingVertical: 10,
      marginHorizontal: 5,  
      paddingHorizontal: 20,
      backgroundColor: color,
    },
    text: {
      color: '#fff',
      fontSize: 16,
    },
    disabledButton: {
      opacity: 0.6,
      backgroundColor: '#888',
    },
  });
  
  return (
    <TouchableOpacity 
      style={[styles.button, props.disabled && styles.disabledButton]}
      onPress={props.onPress} 
      disabled={props.disabled} 
    >
      <Text style={styles.text}>{props.title}</Text>
    </TouchableOpacity>
  );
};


//---------------------------------------------------------------------------// 
//---------------------------------------------------------------------------// 
export function CurrentTime ( props ) 
{
    let data = useSpicyData(); 

    const [time, setTime] = useState(new Date().toLocaleTimeString());

    useEffect(() => {
    const interval = setInterval(() => 
    {
        let t = new Date().toLocaleTimeString(); 
        setTime( t );
        data.setTime( t ); 

        //if(!props.disabled) 
        console.log(`[CurrentTime] time:${t}`);
      }, 1000);
    return () => clearInterval(interval);
    }, []);

    return (
        <View> 
            <Text>
                <Text style={{ color: 'white' }}>Current Time : </Text>
                <Text style={{ color: 'white' }}>{ data.time }</Text>
            </Text>
        </View>
    );
    //return ( <Text> </Text> );
};



//---------------------------------------------------------------------------// 
//---------------------------------------------------------------------------// 